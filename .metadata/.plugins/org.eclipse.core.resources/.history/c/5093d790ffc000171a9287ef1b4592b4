import static org.junit.Assert.*;

import org.junit.Test;

public class Tests {

	@Test
	public void givenTest() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(8); //adds job 0 with time 8
		JobSchedule.Job j1 = schedule.addJob(3); //adds job 1 with time 3
		schedule.addJob(5); //adds job 2 with time 5
		System.out.println(schedule.minCompletionTime());
		assertEquals(8, schedule.minCompletionTime()); //should return 8, since job 0 takes time 8 to complete.				
		/* Note it is not the min completion time of any job, but the earliest the entire set can complete. */
		schedule.getJob(0).requires(schedule.getJob(2)); //job 2 must precede job 0
		assertEquals(13, schedule.minCompletionTime()); //should return 13 (job 0 cannot start until time 5)
		schedule.getJob(0).requires(j1); //job 1 must precede job 0
		assertEquals(13, schedule.minCompletionTime()); //should return 13
		assertEquals(5, schedule.getJob(0).getStartTime()); //should return 5
		assertEquals(0, j1.getStartTime()); //should return 0
		assertEquals(0, schedule.getJob(2).getStartTime()); //should return 0
		j1.requires(schedule.getJob(2)); //job 2 must precede job 1
		assertEquals(16, schedule.minCompletionTime()); //should return 16
		assertEquals(8, schedule.getJob(0).getStartTime()); //should return 8
		assertEquals(5, schedule.getJob(1).getStartTime()); //should return 5
		assertEquals(0, schedule.getJob(2).getStartTime()); //should return 0
		schedule.getJob(1).requires(schedule.getJob(0)); //job 0 must precede job 1 (creates loop)
		assertEquals(-1, schedule.minCompletionTime()); //should return -1
		assertEquals(-1, schedule.getJob(0).getStartTime()); //should return -1
		assertEquals(-1, schedule.getJob(1).getStartTime()); //should return -1
		assertEquals(0, schedule.getJob(2).getStartTime()); //should return 0 (no loops in prerequisites)
	}
	
	@Test
	public void testParallel1() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // job 0 -- 1
		schedule.addJob(2); // job 1 -- 2
		schedule.addJob(3); // job 2 -- 3
		schedule.addJob(4); // job 3 -- 4
		schedule.addJob(5); // job 4 -- 5
		//System.out.println(schedule.minCompletionTime());
		assertEquals(5, schedule.minCompletionTime());
		assertEquals(0, schedule.getJob(0).getStartTime());
		assertEquals(0, schedule.getJob(1).getStartTime());
		assertEquals(0, schedule.getJob(2).getStartTime());
		assertEquals(0, schedule.getJob(3).getStartTime());
		assertEquals(0, schedule.getJob(4).getStartTime());
	}
	
	
	
	@Test
	public void testCycle1() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // job 0 -- 1
		schedule.addJob(2); // job 1 -- 1
		schedule.addJob(3); // job 2 -- 1
		schedule.addJob(4); // job 3 -- 1
		schedule.addJob(5); // job 4 -- 1
		schedule.getJob(1).requires(schedule.getJob(0));
		schedule.getJob(2).requires(schedule.getJob(1));
		schedule.getJob(3).requires(schedule.getJob(2));
		schedule.getJob(4).requires(schedule.getJob(3));		
		schedule.getJob(1).requires(schedule.getJob(3));
		assertEquals(-1, schedule.minCompletionTime());
		assertEquals(0, schedule.getJob(0).getStartTime());
		assertEquals(-1, schedule.getJob(1).getStartTime());
		assertEquals(-1, schedule.getJob(2).getStartTime());
		assertEquals(-1, schedule.getJob(3).getStartTime());
		assertEquals(-1, schedule.getJob(4).getStartTime());
	}
	
	@Test
	public void testCycleAndParallel() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // job 0 -- 1
		schedule.addJob(2); // job 1 -- 1
		schedule.addJob(3); // job 2 -- 1
		schedule.addJob(4); // job 3 -- 1
		schedule.addJob(5); // job 4 -- 1
		schedule.getJob(1).requires(schedule.getJob(0));
		schedule.getJob(2).requires(schedule.getJob(1));
		schedule.getJob(3).requires(schedule.getJob(2));
		schedule.getJob(4).requires(schedule.getJob(3));		
		schedule.getJob(1).requires(schedule.getJob(3));
		
		schedule.addJob(1); // job 5 -- 1
		schedule.addJob(2); // job 6 -- 2
		schedule.addJob(3); // job 7 -- 3
		schedule.addJob(4); // job 8 -- 4
		schedule.addJob(5); // job 9 -- 5
		schedule.getJob(6).requires(schedule.getJob(5));
		schedule.getJob(7).requires(schedule.getJob(6));
		schedule.getJob(8).requires(schedule.getJob(7));
		schedule.getJob(9).requires(schedule.getJob(8));		
		
		assertEquals(-1, schedule.minCompletionTime());
		assertEquals(0, schedule.getJob(0).getStartTime());
		assertEquals(-1, schedule.getJob(1).getStartTime());
		assertEquals(-1, schedule.getJob(2).getStartTime());
		assertEquals(-1, schedule.getJob(3).getStartTime());
		assertEquals(-1, schedule.getJob(4).getStartTime());
		//System.out.println(schedule.getJob(9).getStartTime());
		assertEquals(3, schedule.getJob(7).getStartTime());
		assertEquals(10, schedule.getJob(9).getStartTime());
		
	}
	
	@Test
	public void testCycleLinkParallel() {
		for (int i = 0; i < 1000; i++) {
			JobSchedule schedule = new JobSchedule();
			schedule.addJob(1); // job 0 -- 1
			schedule.addJob(2); // job 1 -- 1
			schedule.addJob(3); // job 2 -- 1
			schedule.addJob(4); // job 3 -- 1
			schedule.addJob(5); // job 4 -- 1
			schedule.getJob(1).requires(schedule.getJob(0));
			schedule.getJob(2).requires(schedule.getJob(1));
			schedule.getJob(3).requires(schedule.getJob(2));
			schedule.getJob(4).requires(schedule.getJob(3));		
			schedule.getJob(1).requires(schedule.getJob(3));
			schedule.addJob(1); // job 5 -- 1
			schedule.addJob(2); // job 6 -- 2
			schedule.addJob(3); // job 7 -- 3
			schedule.addJob(4); // job 8 -- 4
			schedule.addJob(5); // job 9 -- 5
			schedule.getJob(6).requires(schedule.getJob(5));
			schedule.getJob(7).requires(schedule.getJob(6));
			schedule.getJob(8).requires(schedule.getJob(7));
			schedule.getJob(9).requires(schedule.getJob(8));
			schedule.getJob(0).requires(schedule.getJob(9));

			//System.out.println(schedule.minCompletionTime());
			//assertEquals(-1, schedule.minCompletionTime());
			assertEquals(15, schedule.getJob(0).getStartTime());
			assertEquals(-1, schedule.getJob(1).getStartTime());
			assertEquals(-1, schedule.getJob(2).getStartTime());
			assertEquals(-1, schedule.getJob(3).getStartTime());
			assertEquals(-1, schedule.getJob(4).getStartTime());
			//System.out.println(schedule.getJob(9).getStartTime());
			assertEquals(3, schedule.getJob(7).getStartTime());
			assertEquals(10, schedule.getJob(9).getStartTime());
		}
		
	}
	
	@Test
	public void test2() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // job 0 -- 1
		schedule.addJob(2); // job 1 -- 2
		schedule.addJob(3); // job 2 -- 3
		schedule.addJob(4); // job 3 -- 4
		schedule.addJob(5); // job 4 -- 5
		schedule.getJob(1).requires(schedule.getJob(0));
		schedule.getJob(2).requires(schedule.getJob(1));
		schedule.getJob(3).requires(schedule.getJob(2));
		schedule.getJob(4).requires(schedule.getJob(3));
		assertEquals(15, schedule.minCompletionTime());
		schedule.addJob(1); // job 5 - 1
		schedule.getJob(1).requires(schedule.getJob(5));
		schedule.getJob(2).requires(schedule.getJob(5));
		assertEquals(15, schedule.minCompletionTime());
		//System.out.println(schedule.getJob(5).getStartTime());
		assertEquals(0, schedule.getJob(0).getStartTime());
		assertEquals(0, schedule.getJob(5).getStartTime());
		//System.out.println(schedule.minCompletionTime());
	}
	
	@Test
	public void test3() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // job 0 -- 1
		schedule.addJob(2); // job 1 -- 2
		schedule.addJob(3); // job 2 -- 3
		schedule.addJob(4); // job 3 -- 4
		schedule.addJob(5); // job 4 -- 5
		schedule.getJob(1).requires(schedule.getJob(0));
		assertEquals(5, schedule.minCompletionTime());
		schedule.getJob(2).requires(schedule.getJob(1));
		assertEquals(6, schedule.minCompletionTime());
		schedule.getJob(3).requires(schedule.getJob(2));
		assertEquals(10, schedule.minCompletionTime());
		schedule.getJob(4).requires(schedule.getJob(3));
		assertEquals(15, schedule.minCompletionTime());
		schedule.addJob(1); // job 5 - 1
		schedule.getJob(1).requires(schedule.getJob(5));
		schedule.getJob(2).requires(schedule.getJob(5));
		assertEquals(15, schedule.minCompletionTime());
		//System.out.println(schedule.getJob(5).getStartTime());
		assertEquals(0, schedule.getJob(0).getStartTime());
		assertEquals(0, schedule.getJob(5).getStartTime());
		//System.out.println(schedule.minCompletionTime());
	}
	
	@Test
	public void test4() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // job 0 -- 1
		schedule.addJob(2); // job 1 -- 2
		schedule.addJob(3); // job 2 -- 3
		schedule.addJob(4); // job 3 -- 4
		schedule.addJob(5); // job 4 -- 5
		//schedule.addJob(1); // job 5 -- 1
		schedule.getJob(1).requires(schedule.getJob(0));
		schedule.getJob(2).requires(schedule.getJob(1));
		schedule.getJob(3).requires(schedule.getJob(1));
		schedule.getJob(4).requires(schedule.getJob(3));
		schedule.addJob(1); // job 5 -- 1
		schedule.addJob(2); // job 6 -- 2
		schedule.addJob(3); // job 7 -- 3
		schedule.addJob(4); // job 8 -- 4
		schedule.addJob(5); // job 9 -- 5
		schedule.getJob(1).requires(schedule.getJob(6));
		schedule.getJob(6).requires(schedule.getJob(5));
		schedule.getJob(7).requires(schedule.getJob(6));
		schedule.getJob(8).requires(schedule.getJob(6));
		schedule.getJob(9).requires(schedule.getJob(7));
		schedule.getJob(6).requires(schedule.getJob(9));

		//System.out.println(schedule.minCompletionTime());
		//System.out.println(schedule.getJob(5).getStartTime());
		//System.out.println(schedule.getJob(6).getStartTime());
		//System.out.println(schedule.getJob(1).getStartTime());
		//System.out.println(schedule.getJob(3).getStartTime());
		//System.out.println(schedule.getJob(4).getStartTime());
		assertEquals(-1, schedule.minCompletionTime());	
	}
	
	@Test
	public void test5() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // job 0 -- 1
		schedule.addJob(2); // job 1 -- 2
		schedule.addJob(3); // job 2 -- 3
		schedule.getJob(1).requires(schedule.getJob(0));
		schedule.getJob(2).requires(schedule.getJob(1));
		schedule.getJob(0).requires(schedule.getJob(2));
		assertEquals(-1, schedule.minCompletionTime());	

	}
	
	@Test
	public void testPiazza() {
		JobSchedule schedule = new JobSchedule();
		schedule.addJob(1); // A 0
		schedule.addJob(1); // B 1
		schedule.addJob(2); // C 2
		schedule.addJob(1); // D 3
		schedule.addJob(1); // E 4
		schedule.addJob(1); // F 5
		schedule.addJob(1); // G 6
		schedule.addJob(1); // H 7
		
		schedule.getJob(0).requires(schedule.getJob(5));
		schedule.getJob(5).requires(schedule.getJob(3));
		schedule.getJob(3).requires(schedule.getJob(0));
		schedule.getJob(4).requires(schedule.getJob(3));
		
		schedule.getJob(2).requires(schedule.getJob(1));
		schedule.getJob(7).requires(schedule.getJob(2));
		assertEquals(-1, schedule.minCompletionTime());	
		assertEquals(0, schedule.getJob(1).getStartTime());
		assertEquals(1, schedule.getJob(2).getStartTime());
		assertEquals(0, schedule.getJob(6).getStartTime());
		assertEquals(3, schedule.getJob(7).getStartTime());
		
	}
}